package net.stinfoservices.helias.renaud.tempest.level.terrain;

import org.junit.Assert;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.util.HashMap;
import java.util.Map;

import org.lwjgl.BufferUtils;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL12;
import org.lwjgl.opengl.GL13;

import net.stinfoservices.helias.renaud.tempest.TempestMain;
import net.stinfoservices.helias.renaud.tempest.level.properties.CalibrageProps;
import net.stinfoservices.helias.renaud.tempest.tools.Point3D;
import net.stinfoservices.helias.renaud.tempest.tools.Point3D.Double;
import net.stinfoservices.helias.renaud.tempest.tools.factory.TextureLoader;

/**
 * Répartition des cases sous forme de Puits, distances régulières à partir du centre.
 * @author freemac
 *
 */
public class Puits implements IArea3D {

	private static final int WIDTH=CalibrageProps.getInstance().getTailleGrille().x;
	private static final int HEIGHT=CalibrageProps.getInstance().getTailleGrille().y;
	private static final int DEPTH=CalibrageProps.getInstance().getTailleGrille().z;
	public static final int ZONE_HEIGHT=CalibrageProps.getInstance().getZoneHeight(); //pixels
	public static final int ZONE_WIDTH=(WIDTH*ZONE_HEIGHT)/HEIGHT; //pixels
	private static final int ZONE_DEPTH=(DEPTH*ZONE_HEIGHT)/HEIGHT; //pixels
	public static boolean AXE_Z_NEGATIVE=false;
	
	private Map<Integer, Map<Integer, Map<Integer, ICase3D>>> cases = new HashMap<Integer, Map<Integer, Map<Integer, ICase3D>>>();
	private ByteBuffer imageRT;
	private ByteBuffer imageLT;
	private ByteBuffer imageUP;
	private ByteBuffer imageDN;
	private ByteBuffer imageBK;
	private ByteBuffer imageFT;

	public Puits() {
		Assert.assertEquals(WIDTH,DEPTH);
		for (int i=0;i<WIDTH;i++) {
			// rayon
			// i=>WIDTH
			// a=>Math.PI*2
			double angle = (((double)i)*Math.PI*2.0)/((double)WIDTH);
			cases.put(i, new HashMap<Integer, Map<Integer, ICase3D>>());
			for (int j=0;j<HEIGHT;j++) {
				// normal
				double height = 0.5*(double)ZONE_HEIGHT/(double)HEIGHT+(double)j*(double)ZONE_HEIGHT/(double)HEIGHT;
				cases.get(i).put(j, new HashMap<Integer, ICase3D>());
				for (int k=0;k<DEPTH;k++) {
					double rayon =(0.5*(double)ZONE_DEPTH/(double)DEPTH+(double)k*(double)ZONE_DEPTH/(double)DEPTH)/2.0;
					// presque normal (rayon), donc distance divisé par deux.
					Point3D.Double positionZone = new Point3D.Double();
					positionZone.x=rayon*Math.cos(angle)+ZONE_WIDTH/2.0;
					positionZone.y=height;
					positionZone.z=rayon*Math.sin(angle)+ZONE_DEPTH/2.0;
					if (AXE_Z_NEGATIVE) {
						positionZone.z=-positionZone.z;
					}
					cases.get(i).get(j).put(k, new Case3D(new Point3D.Integer(i,j,k),positionZone));
				}
			}
		}
		
		 BufferedImage image1 = TextureLoader.loadImage(TempestMain.class.getResource("skyboxRT.png"));//The path is inside the jar file
		 this.imageRT = TextureLoader.toByteBuffer(image1);
		 BufferedImage image2 = TextureLoader.loadImage(TempestMain.class.getResource("skyboxLT.png"));//The path is inside the jar file
		 this.imageLT = TextureLoader.toByteBuffer(image2);
		 BufferedImage image3 = TextureLoader.loadImage(TempestMain.class.getResource("skyboxUP.png"));//The path is inside the jar file
		 this.imageUP = TextureLoader.toByteBuffer(image3);
		 BufferedImage image4 = TextureLoader.loadImage(TempestMain.class.getResource("skyboxDN.png"));//The path is inside the jar file
		 this.imageDN = TextureLoader.toByteBuffer(image4);
		 BufferedImage image5 = TextureLoader.loadImage(TempestMain.class.getResource("skyboxBK.png"));//The path is inside the jar file
		 this.imageBK = TextureLoader.toByteBuffer(image5);
		 BufferedImage image6 = TextureLoader.loadImage(TempestMain.class.getResource("skyboxFT.png"));//The path is inside the jar file
		 this.imageFT = TextureLoader.toByteBuffer(image6);
		   
		 prepareTextureCube();
	}
	
	@Override
	public void setColor(Color color) {
	}
	
	
	private static IntBuffer createIntBuffer(int numElements){
		return ByteBuffer.allocateDirect(4*numElements).order(ByteOrder.nativeOrder()).asIntBuffer();
	}
	
	int id; 
	private void prepareTextureCube() {
		// http://raptor.developpez.com/tutorial/opengl/skybox/
		
	    IntBuffer textureId = createIntBuffer(1);
		GL11.glGenTextures(textureId );
	    GL11.glBindTexture(GL13.GL_TEXTURE_CUBE_MAP, textureId.get(0));
	    id = textureId.get(0);
		
		int imageSize = TextureLoader.texWidth;

		// a partir du livre...
		GL11.glTexImage2D(GL13.GL_TEXTURE_CUBE_MAP_POSITIVE_X, 0, GL11.GL_RGB, imageSize, imageSize, 0, GL11.GL_RGB, GL11.GL_UNSIGNED_BYTE, imageRT);
		GL11.glTexImage2D(GL13.GL_TEXTURE_CUBE_MAP_NEGATIVE_X, 0, GL11.GL_RGB, imageSize, imageSize, 0, GL11.GL_RGB, GL11.GL_UNSIGNED_BYTE, imageLT);
		GL11.glTexImage2D(GL13.GL_TEXTURE_CUBE_MAP_POSITIVE_Y, 0, GL11.GL_RGB, imageSize, imageSize, 0, GL11.GL_RGB, GL11.GL_UNSIGNED_BYTE, imageUP);
		GL11.glTexImage2D(GL13.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, GL11.GL_RGB, imageSize, imageSize, 0, GL11.GL_RGB, GL11.GL_UNSIGNED_BYTE, imageDN);
		GL11.glTexImage2D(GL13.GL_TEXTURE_CUBE_MAP_POSITIVE_Z, 0, GL11.GL_RGB, imageSize, imageSize, 0, GL11.GL_RGB, GL11.GL_UNSIGNED_BYTE, imageBK);
		GL11.glTexImage2D(GL13.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, GL11.GL_RGB, imageSize, imageSize, 0, GL11.GL_RGB, GL11.GL_UNSIGNED_BYTE, imageFT);
		
		GL11.glTexParameteri(GL13.GL_TEXTURE_CUBE_MAP,GL11.GL_TEXTURE_WRAP_S,GL12.GL_CLAMP_TO_EDGE);//GL_CLAMP);//REPEAT);
		GL11.glTexParameteri(GL13.GL_TEXTURE_CUBE_MAP,GL11.GL_TEXTURE_WRAP_T,GL12.GL_CLAMP_TO_EDGE);//GL11.GL_CLAMP);//REPEAT);
		// ne pas utiliser R !
//		GL11.glTexParameteri(GL13.GL_TEXTURE_CUBE_MAP,GL12.GL_TEXTURE_WRAP_R,GL11.GL_REPEAT);//GL11.GL_REPEAT);
		GL11.glTexParameteri(GL13.GL_TEXTURE_CUBE_MAP,GL11.GL_TEXTURE_MAG_FILTER,GL11.GL_NEAREST);//GL11.GL_NEAREST);
		GL11.glTexParameteri(GL13.GL_TEXTURE_CUBE_MAP,GL11.GL_TEXTURE_MIN_FILTER,GL11.GL_NEAREST);//GL11.GL_NEAREST);
	}
	
	@Override
	public boolean render(int calque) {
		if (1==1) return true;
		// LWJGL skybox https://code.google.com/p/lwjgl-water-shader/source/browse/trunk/src/edu/fhooe/mtd360/watershader/objects/WaterPlane.java?r=32
		// C pure https://code.google.com/r/zaphosmatthewnicholls-opengl-superbible-java/source/browse/OpenGLSuperBible/src/openglsuperbible/Chapter7/Cubemap.java?spec=svn4a85fd5b2ace923e39ce98a9287fbfce61beb4dc&name=default&r=4a85fd5b2ace923e39ce98a9287fbfce61beb4dc
		// super bible opengl https://code.google.com/p/oglsuperbible5/source/browse/trunk/Src/Chapter07/
		// red book https://kenai.com/nonav/projects/jogl/sources/jogl-demos-git/content/src/redbook/src/glredbook1314/cubemap.java
		// api skyrender http://hub.jmonkeyengine.org/ https://github.com/jMonkeyEngine/jmonkeyengine
		// GL13.GL_TEXTURE_CUBE_MAP
		
		GL11.glPushMatrix();

		GL11.glTranslatef(getZoneSize().y/2, getZoneSize().y/2,getZoneSize().y/2);
		GL11.glScaled(ZONE_HEIGHT, ZONE_HEIGHT, ZONE_HEIGHT);
		
		GL11.glEnable(GL13.GL_TEXTURE_CUBE_MAP);
		GL11.glBindTexture(GL13.GL_TEXTURE_CUBE_MAP, id);
		GL11.glEnable(GL11.GL_TEXTURE_GEN_S);
		GL11.glEnable(GL11.GL_TEXTURE_GEN_T);
//	    GL11.glEnable(GL11.GL_TEXTURE_GEN_R);
	    
	    //ambiance color
		FloatBuffer ambianceLight = BufferUtils.createFloatBuffer(4);
//		Point3D.Double ka=new Point3D.Double(0.5,0.25,0.25);
		Point3D.Double ka=new Point3D.Double(1,1,1);
		ambianceLight.put(new float []{(float)ka.x,(float)ka.y,(float)ka.z,1.0f});
		ambianceLight.flip();
		GL11.glMaterial(GL11.GL_FRONT_AND_BACK, GL11.GL_AMBIENT, ambianceLight);
	    
	    // cube QUAD avec glTexCoord3f
	    GL11.glBegin(GL11.GL_QUADS);
		// GL_TEXTURE_CUBE_MAP_NEGATIVE_X
	    GL11.glTexCoord3f( +1, +1, +1 );  GL11.glVertex3f( -1, -1, -1 );
	    GL11.glTexCoord3f( +1, +1, -1 );  GL11.glVertex3f( -1, -1, +1 );
	    GL11.glTexCoord3f( +1, -1, -1 );  GL11.glVertex3f( -1, +1, +1 );
	    GL11.glTexCoord3f( +1, -1, +1 );  GL11.glVertex3f( -1, +1, -1 );
	    // GL_TEXTURE_CUBE_MAP_POSITIVE_X
	    GL11.glTexCoord3f( -1, +1, -1 );  GL11.glVertex3f( +1, -1, +1 );
	    GL11.glTexCoord3f( -1, +1, +1 );  GL11.glVertex3f( +1, -1, -1 );
	    GL11.glTexCoord3f( -1, -1, +1 );  GL11.glVertex3f( +1, +1, -1 );
	    GL11.glTexCoord3f( -1, -1, -1 );  GL11.glVertex3f( +1, +1, +1 );
		// GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
	    GL11.glTexCoord3f( -1, +1, +1 );  GL11.glVertex3f( +1, -1, -1 );
	    GL11.glTexCoord3f( -1, +1, -1 );  GL11.glVertex3f( +1, -1, +1 );
	    GL11.glTexCoord3f( +1, +1, -1 );  GL11.glVertex3f( -1, -1, +1 );
	    GL11.glTexCoord3f( +1, +1, +1 );  GL11.glVertex3f( -1, -1, -1 );
		// GL_TEXTURE_CUBE_MAP_POSITIVE_Y
	    GL11.glTexCoord3f( +1, -1, +1 );  GL11.glVertex3f( -1, +1, -1 );
	    GL11.glTexCoord3f( +1, -1, -1 );  GL11.glVertex3f( -1, +1, +1 );
	    GL11.glTexCoord3f( -1, -1, -1 );  GL11.glVertex3f( +1, +1, +1 );
	    GL11.glTexCoord3f( -1, -1, +1 );  GL11.glVertex3f( +1, +1, -1 );
		// GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
	    GL11.glTexCoord3f( -1, +1, +1 );  GL11.glVertex3f( +1, -1, -1 );
	    GL11.glTexCoord3f( +1, +1, +1 );  GL11.glVertex3f( -1, -1, -1 );
	    GL11.glTexCoord3f( +1, -1, +1 );  GL11.glVertex3f( -1, +1, -1 );
	    GL11.glTexCoord3f( -1, -1, +1 );  GL11.glVertex3f( +1, +1, -1 );
		// GL_TEXTURE_CUBE_MAP_POSITIVE_Z
	    GL11.glTexCoord3f( +1, +1, -1 );  GL11.glVertex3f( -1, -1, +1 );
	    GL11.glTexCoord3f( -1, +1, -1 );  GL11.glVertex3f( +1, -1, +1 );
	    GL11.glTexCoord3f( -1, -1, -1 );  GL11.glVertex3f( +1, +1, +1 );
	    GL11.glTexCoord3f( +1, -1, -1 );  GL11.glVertex3f( -1, +1, +1 );
	    GL11.glEnd();
	    
//	    GL11.glDisable(GL11.GL_TEXTURE_GEN_R);
		GL11.glDisable(GL11.GL_TEXTURE_GEN_T);
	    GL11.glDisable(GL11.GL_TEXTURE_GEN_S);
	    GL11.glDisable(GL13.GL_TEXTURE_CUBE_MAP);
	    
		GL11.glPopMatrix();
		return true;
	}

	@Override
	public Point3D.Integer getTerrainSize() {
		return new Point3D.Integer(WIDTH, HEIGHT, DEPTH);
	}

	@Override
	public ICase3D getCase(Point3D.Integer position) {
		return cases.get(position.x).get(position.y).get(position.z);
	}

	@Override
	public Point3D.Integer getZoneSize() {
		return new Point3D.Integer(ZONE_WIDTH, ZONE_HEIGHT, ZONE_DEPTH);
	}

	@Override
	public Double getCaseSize() {
		return new Point3D.Double((double)ZONE_WIDTH/(double)WIDTH, (double)ZONE_HEIGHT/(double)HEIGHT, (double)ZONE_DEPTH/(double)DEPTH);
	}

}
